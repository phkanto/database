Server [localhost]:
Database [postgres]:
Port [5432]:
Username [postgres]:
Password for user postgres:
psql (17.6)
WARNING: Console code page (866) differs from Windows code page (1251)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# \d
Did not find any relations.
postgres=# CREATE TABLE departments (dept_id SERIAL PRIMARY KEY, dept_name VARCHAR(100) NOT NULL, location VARCHAR(100));
CREATE TABLE
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), dept_id INTEGER REFERENCES departments(dept_id));
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER, FOREIGN KEY(dept_id) REFERENCES departments(dept_id));
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER);
CREATE TABLE
postgres=# ALTER TABLE employees
postgres-# ADD CONSTRAINT fk_employee_department
postgres-# FOREIGN KEY (dept_id) REFERENCES departments(dept_id);
ALTER TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER, CONSTRAINT fk_employee_department FOREIGN KEY (dept_id) REFERENCES departments(dept_id));
CREATE TABLE
postgres=# --Referential Integrity
postgres=# INSERT INTO departments (dept_name, location) VALUES ('Engineering','Building A'),('Marketing','Building B'),('HR','Building C');
INSERT 0 3
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John','Smith', 1);
INSERT 0 1
postgres=# --This insert won
postgres=#
postgres=# -- This insert won't work because this dept_id doesn't exist
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John','Smith', 99);
ERROR:  insert or update on table "employees" violates foreign key constraint "fk_employee_department"
DETAIL:  Key (dept_id)=(99) is not present in table "departments".
postgres=# --This delete will fail because there is an employee in this department
postgres=# DELETE FROM departments WHERE dept_id = 1;
ERROR:  update or delete on table "departments" violates foreign key constraint "fk_employee_department" on table "employees"
DETAIL:  Key (dept_id)=(1) is still referenced from table "employees".
postgres=# --CASCADE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE);
CREATE TABLE
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 1);
INSERT 0 1
postgres=# DELETE FROM departments WHERE dept_id=1;
DELETE 1
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# CREATE TABLE employees(emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET NULL);
CREATE TABLE
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 1);
ERROR:  insert or update on table "employees" violates foreign key constraint "employees_dept_id_fkey"
DETAIL:  Key (dept_id)=(1) is not present in table "departments".
postgres=# INSERT INTO employees (first_name, last_name, dept_id) VALUES ('John', 'Smith', 2);
INSERT 0 1
postgres=# DELETE FROM departments WHERE dept_id=2;
DELETE 1
postgres=# SELECT * FROM employees;
 emp_id | first_name | last_name | dept_id
--------+------------+-----------+---------
      2 | John       | Smith     |
(1 row)


postgres=# DROP TABLE employees;
DROP TABLE
postgres=# --SET DEFAULT option for FK
postgres=# CREATE TABLE employees (emp_id SERIAL FOREIGN KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT);
ERROR:  syntax error at or near "FOREIGN"
LINE 1: CREATE TABLE employees (emp_id SERIAL FOREIGN KEY, first_nam...
                                              ^
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# -- THIS ONE RESTRICTS
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON DELETE RESTRICT);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# --THIS ON SETS IT DEFAULT
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON DELETE SET DEFAULT);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# --This flag allows foreign key value to update when parent's values are changed
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON UPDATE CASCADE);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# --Combined Option
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, dept_id INTEGER REFERENCES departments(dept_id) ON DELETE CASCADE ON UPDATE CASCADE);
CREATE TABLE
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# --ONE TO ONE RELATIONSHIPS
postgres=# \d
                   List of relations
 Schema |          Name           |   Type   |  Owner
--------+-------------------------+----------+----------
 public | departments             | table    | postgres
 public | departments_dept_id_seq | sequence | postgres
(2 rows)


postgres=# DROP TABLE departments;
DROP TABLE
postgres=# \d
Did not find any relations.
postgres=# CREATE TABLE users (user_id SERIAL PRIMARY KEY, username VARCHAR(50) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE TABLE
postgres=# CREATE TABLE user_profiles (profile_id SERIAL PRIMARY KEY, user_id INTEGER UNIQUE NOT NULL, first_name VARCHAR(50), last_name VARCHAR(50), bio TEXT, profile_picture_url VARCHAR(255), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE TABLE
postgres=# DROP TABLE user_profile;
ERROR:  table "user_profile" does not exist
postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=# CREATE TABLE user_profiles (user_id INTEGER PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), bio TEXT, profile_picture_url VARCHAR(255), FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE);
CREATE TABLE
postgres=# INSERT INTO users (username, email) VALUES ('johndoe','john@example.com');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name, bio) VALUES (1, 'John', 'Doe', 'SFW Developer');
INSERT 0 1
postgres=# INSERT INTO user_profiles (user_id, first_name, last_name) VALUES (1, 'Jane', 'Smith');
ERROR:  duplicate key value violates unique constraint "user_profiles_pkey"
DETAIL:  Key (user_id)=(1) already exists.
postgres=# \d
                List of relations
 Schema |       Name        |   Type   |  Owner
--------+-------------------+----------+----------
 public | user_profiles     | table    | postgres
 public | users             | table    | postgres
 public | users_user_id_seq | sequence | postgres
(3 rows)


postgres=# DROP TABLE user_profiles;
DROP TABLE
postgres=# DROP TABLE users;
DROP TABLE
postgres=# CREATE TABLE departments (dept_id SERIAL PRIMARY KEY, dept_name VARCHAR(100) NOT NULL, manager_name VARCHAR(100), budget DECIMAL(10, 2));
CREATE TABLE
postgres=# CREATE TABLE employees (emp_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, position VARCHAR(100), salary DECIMAL(10, 2), hire_data DATE DEFAULT CURRENT_DATE, dept_id INTEGER NOT NULL, FOREIGN KEY (dept_id) REFERENCES departments(dept_id) ON DELETE RESTRICT);
CREATE TABLE
postgres=# \d
                   List of relations
 Schema |          Name           |   Type   |  Owner
--------+-------------------------+----------+----------
 public | departments             | table    | postgres
 public | departments_dept_id_seq | sequence | postgres
 public | employees               | table    | postgres
 public | employees_emp_id_seq    | sequence | postgres
(4 rows)


postgres=# DROP TABLE departments;
ERROR:  cannot drop table departments because other objects depend on it
DETAIL:  constraint employees_dept_id_fkey on table employees depends on table departments
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
postgres=# DROP TABLE employees;
DROP TABLE
postgres=# DROP TABLE departments;
DROP TABLE
postgres=# CREATE TABLE blog_posts (post_id SERIAL PRIMARY KEY, title VARCHAR(200) NOT NULL, content TEXT, author VARCHAR(100), published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE TABLE
postgres=# CREATE TABLE comments (comment_id SERIAL PRIMARY KEY, post_id INTEGER NOT NULL, commenter_name VARCHAR(100), comment_text TEXT NOT NULL, comment date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(post_id) REFERENCES blog_posts(post_id) ON DELETE CASCADE);
ERROR:  syntax error at or near "TIMESTAMP"
LINE 1: ...AR(100), comment_text TEXT NOT NULL, comment date TIMESTAMP ...
                                                             ^
postgres=# CREATE TABLE comments (comment_id SERIAL PRIMARY KEY, post_id INTEGER NOT NULL, commenter_name VARCHAR(100), comment_text TEXT NOT NULL, comment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(post_id) REFERENCES blog_posts(post_id) ON DELETE CASCADE);
CREATE TABLE
postgres=# \d
                   List of relations
 Schema |          Name           |   Type   |  Owner
--------+-------------------------+----------+----------
 public | blog_posts              | table    | postgres
 public | blog_posts_post_id_seq  | sequence | postgres
 public | comments                | table    | postgres
 public | comments_comment_id_seq | sequence | postgres
(4 rows)


postgres=# DROP TABLE blog_posts;
ERROR:  cannot drop table blog_posts because other objects depend on it
DETAIL:  constraint comments_post_id_fkey on table comments depends on table blog_posts
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
postgres=# DROP TABLE comments;
DROP TABLE
postgres=# DROP TABLE blog_posts;
DROP TABLE
postgres=# CREATE TABLE students (student_id SERIAL PRIMARY KEY, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, email VARCHAR(100) UNIQUE, enrollment_date DATE DEFAULT CURRENT_DATE);
CREATE TABLE
postgres=# CREATE TABLE courses (course_id SERIAL PRIMARY KEY, course_code VARCHAR(10) UNIQUE NOT NULL, course_name VARCHAR(100) NOT NULL, credits INTEGER NOT NULL, instructor VARCHAR(100));
CREATE TABLE
postgres=# CREATE TABLE student_enrollments (enrollment_id SERIAL PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date DATE DEFAULT CURRENT_DATE, grade CHAR(2), FOREIGN KEY(student_id) REFERENCES students(student_id) ON DELETE CASCADE, FOREIGN KEY (course_id) REFERENCES courses(course_id) ON DELETE CASCADE, UNIQUE(student_id, course_id));
CREATE TABLE
postgres=#
