SELECT COUNT(*) AS total_employees FROM employees;
SELECT COUNT(DISTINCT department) AS unique_departments FROM employees;
SELECT SUM(salary) AS total_salaries, AVG(salary) AS avg_salary FROM employees;
SELECT MAX(salary) AS highest_salary, MIN(salary) AS lowest_salary FROM employees;
SELECT department, STRING_AGG(first_name, ', ') AS employee_names FROM employees GROUP BY department;
SELECT department, ARRAY_AGG(salary) AS salary_array FROM employees GROUP BY department;
SELECT department, STDDEV(salary) AS salary_std_dev, VARIANCE(salary) AS salary_variance FROM employees GROUP BY department;
SELECT department, COUNT(*) AS employee_count, SUM(salary) AS total_salary, AVG(salary) AS avg_salary FROM employees GROUP BY department;
SELECT department, COUNT(*) AS employee_count FROM employees GROUP BY department HAVING COUNT(*) > 5;
SELECT employee_id, first_name, department, salary, AVG(salary) OVER (PARTITION BY department) AS dept_avg_salary FROM employees;
SELECT COUNT(*) - COUNT(email) AS null_emails FROM employees;

SELECT c.name, c.email, o.order_date, o.total_amount
FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id;
SELECT c.name, c.email, o.order_date, o.total_amount
FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id;
SELECT e1.name AS employee, e2.name AS manager
FROM employees e1 LEFT JOIN employees e2 ON e1.manager_id = e2.employee_id;
SELECT c.name, o.order_date, oi.quantity, p.product_name, p.price
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_items oi ON o.order_id = oi.order_id
INNER JOIN products p ON oi.product_id = p.product_id;

SELECT first_name, last_name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);

WITH regional_sales AS (
    SELECT region_id, SUM(amount) AS total_sales FROM orders GROUP BY region_id
)
SELECT region_id, total_sales FROM regional_sales WHERE total_sales > 1000000;

WITH RECURSIVE org_chart AS (
    SELECT employee_id, first_name, last_name, manager_id FROM employees WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.first_name, e.last_name, e.manager_id
    FROM employees e INNER JOIN org_chart oc ON e.manager_id = oc.employee_id
)
SELECT * FROM org_chart;

SELECT product_name FROM warehouse_1 UNION SELECT product_name FROM warehouse_2;
SELECT product_id FROM warehouse_1 WHERE quantity = 0 INTERSECT SELECT product_id FROM warehouse_2 WHERE quantity = 0;

SELECT first_name, last_name, department, salary,
       RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
FROM employees;

SELECT product_name,
       SUM(CASE WHEN year=2022 THEN sales_amount ELSE 0 END) AS year_2022,
       SUM(CASE WHEN year=2023 THEN sales_amount ELSE 0 END) AS year_2023
FROM sales GROUP BY product_name;

SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2023' AS year, year_2023 AS sales_amount FROM pivoted_sales;

BEGIN;
UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
COMMIT;

BEGIN;
INSERT INTO orders(customer_id, total) VALUES (1, 250.00);
INSERT INTO order_items(order_id, product_id, quantity) VALUES (1, 101, 2);
UPDATE inventory SET stock = stock - 2 WHERE product_id = 101;
COMMIT;

BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
COMMIT;

BEGIN;
INSERT INTO customers(name,email) VALUES ('Alice','alice@email.com');
SAVEPOINT after_customer_insert;
INSERT INTO orders(customer_id,total) VALUES (1,500.00);
ROLLBACK TO SAVEPOINT after_customer_insert;
INSERT INTO orders(customer_id,total) VALUES (1,300.00);
COMMIT;

COPY employees TO '/tmp/employees.csv' WITH CSV HEADER;
COPY (SELECT * FROM employees WHERE department='IT') TO '/tmp/it_employees.csv' WITH CSV HEADER;

COPY employees(first_name,last_name,email) FROM '/tmp/new_employees.csv' WITH CSV HEADER;

COPY employees TO '/tmp/employees.txt' WITH DELIMITER '|' NULL 'N/A' CSV HEADER;
COPY customer_feedback TO '/tmp/feedback.csv' WITH CSV HEADER DELIMITER ',' QUOTE '"' ESCAPE '"';
COPY sales_data FROM '/tmp/sales.csv' WITH CSV HEADER NULL 'NULL';

\! pg_dump -h localhost -U username -d database_name > backup.sql
\! pg_dump -h localhost -U username -d database_name -Fc > backup.dump
\! pg_dump -h localhost -U username -d database_name -t employees > table_backup.sql

\! pg_restore -h localhost -U username -d target_database backup.dump
\! createdb new_database
\! pg_restore -h localhost -U username -d new_database backup.dump

\! pg_dumpall -h localhost -U postgres > full_cluster_backup.sql

SELECT pg_create_restore_point('before_data_migration');

\! pg_dump -h source_host -U username -d source_db -Fc > migration.dump
\! pg_restore -h target_host -U username -d target_db migration.dump

CREATE PUBLICATION migration_pub FOR ALL TABLES;
CREATE SUBSCRIPTION migration_sub CONNECTION 'host=source_host dbname=source_db user=replication_user' PUBLICATION migration_pub;

CREATE TABLE staging_customers AS SELECT * FROM customers WHERE 1=0;
COPY (SELECT * FROM customers LIMIT 10000 OFFSET 0) TO '/tmp/customers_batch_1.csv' WITH CSV HEADER;
COPY staging_customers FROM '/tmp/customers_batch_1.csv' WITH CSV HEADER;
INSERT INTO target_customers SELECT * FROM staging_customers ON CONFLICT (customer_id) DO UPDATE SET ...;
