SQL Lab: Advanced Querying Practice

1. Subqueries
-------------
SELECT first_name, last_name, salary
FROM employees
WHERE salary > (
    SELECT AVG(salary)
    FROM employees
);

2. Common Table Expressions (CTEs)
----------------------------------
WITH regional_sales AS (
    SELECT region_id, SUM(amount) AS total_sales
    FROM orders
    GROUP BY region_id
)
SELECT region_id, total_sales
FROM regional_sales
WHERE total_sales > 1000000;

3. Recursive Queries
-------------------
WITH RECURSIVE org_chart AS (
    SELECT employee_id, first_name, last_name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    UNION ALL
    SELECT e.employee_id, e.first_name, e.last_name, e.manager_id
    FROM employees e
    INNER JOIN org_chart oc ON e.manager_id = oc.employee_id
)
SELECT * FROM org_chart;

4. Set Operations
-----------------
-- UNION
SELECT product_name FROM warehouse_1
UNION
SELECT product_name FROM warehouse_2;

-- INTERSECT
SELECT product_id FROM warehouse_1 WHERE quantity = 0
INTERSECT
SELECT product_id FROM warehouse_2 WHERE quantity = 0;

5. Window Functions & Partitioning
----------------------------------
SELECT
    first_name,
    last_name,
    department,
    salary,
    RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank
FROM employees;

6. Pivot with Conditional Aggregation
-------------------------------------
SELECT
    product_name,
    SUM(CASE WHEN year = 2022 THEN sales_amount ELSE 0 END) AS year_2022,
    SUM(CASE WHEN year = 2023 THEN sales_amount ELSE 0 END) AS year_2023,
    SUM(CASE WHEN year = 2024 THEN sales_amount ELSE 0 END) AS year_2024
FROM sales
GROUP BY product_name;

7. Unpivot with UNION ALL
-------------------------
SELECT product_name, '2022' AS year, year_2022 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2023' AS year, year_2023 AS sales_amount FROM pivoted_sales
UNION ALL
SELECT product_name, '2024' AS year, year_2024 AS sales_amount FROM pivoted_sales
ORDER BY product_name, year;

8. Complex Filtering and Sorting
--------------------------------
-- FILTER Clause
SELECT
    employee_id,
    SUM(salary) OVER (PARTITION BY department) AS total_dept_salary,
    AVG(salary) FILTER (WHERE tenure > 5) OVER () AS avg_salary_senior
FROM employees;

-- Custom Sorting with CASE
SELECT product_name, status
FROM orders
ORDER BY
    CASE status
        WHEN 'High Priority' THEN 1
        WHEN 'Medium Priority' THEN 2
        WHEN 'Low Priority' THEN 3
        ELSE 4
    END;

9. Query Optimization Techniques
--------------------------------
-- Use EXPLAIN and EXPLAIN ANALYZE
EXPLAIN SELECT * FROM employees WHERE department = 'Sales';
EXPLAIN ANALYZE SELECT * FROM employees WHERE department = 'Sales';

-- Use Indexes
CREATE INDEX idx_employees_department ON employees(department);

-- Avoid SELECT *
SELECT first_name, last_name, salary FROM employees;

-- Use UNION ALL when duplicates are acceptable
SELECT product_name FROM warehouse_1
UNION ALL
SELECT product_name FROM warehouse_2;

-- Use LIMIT for testing
SELECT * FROM orders LIMIT 10;
